// <auto-generated />
using System;
using JCPBackend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JCPBackend.Migrations.Postgres
{
    [DbContext(typeof(JobCostProTestingContext))]
    [Migration("20221221094412_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JCPBackend.Models.j_customer", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("address_line_1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("address_line_2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("address_line_3")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("alt_no")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("company_name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("home_no")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("mobile_no")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("postal")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("reg_number")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("site_access_id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("type")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("vat_no")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("work_no")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("id");

                    b.ToTable("j_customers");
                });

            modelBuilder.Entity("JCPBackend.Models.j_job_code", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("site_access_id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<int>("cost")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("labour_rate")
                        .HasColumnType("integer");

                    b.Property<string>("location")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("markup")
                        .HasColumnType("integer");

                    b.Property<int>("standard_hours")
                        .HasColumnType("integer");

                    b.Property<int>("standard_volume")
                        .HasColumnType("integer");

                    b.HasKey("code", "site_access_id");

                    b.ToTable("j_job_codes");
                });

            modelBuilder.Entity("JCPBackend.Models.j_quote", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("branch_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<int>("checkin_odometer")
                        .HasColumnType("integer");

                    b.Property<DateTime>("create_datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("create_user_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("customer_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("ro_number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("site_access")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("tech_id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<DateTime>("update_datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("update_user_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("vehicle_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.HasKey("id");

                    b.HasIndex("create_user_id");

                    b.HasIndex("customer_id");

                    b.HasIndex("tech_id");

                    b.HasIndex("update_user_id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("j_quotes");
                });

            modelBuilder.Entity("JCPBackend.Models.j_quote_item", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<bool>("auth")
                        .HasColumnType("boolean");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("job_code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("labour_hours")
                        .HasColumnType("integer");

                    b.Property<int>("labour_rate")
                        .HasColumnType("integer");

                    b.Property<string>("location")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("part_markup")
                        .HasColumnType("integer");

                    b.Property<int>("part_quantity")
                        .HasColumnType("integer");

                    b.Property<int>("part_rate")
                        .HasColumnType("integer");

                    b.Property<string>("quote_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<int>("sort_order")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("PK_j_quote_items_1");

                    b.HasIndex("quote_id");

                    b.ToTable("j_quote_items");
                });

            modelBuilder.Entity("JCPBackend.Models.j_quote_item_supplier", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("accepted_by_user_id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<DateTime?>("accepted_datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("count")
                        .HasColumnType("integer");

                    b.Property<string>("part_number")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("quote_item_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("quoted_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("quoted_datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("quoted_price")
                        .HasColumnType("integer");

                    b.Property<string>("remarks")
                        .HasColumnType("text");

                    b.Property<string>("supplier_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.HasKey("id")
                        .HasName("PK_j_quote_item_quotes");

                    b.HasIndex("accepted_by_user_id");

                    b.HasIndex("quote_item_id");

                    b.HasIndex("supplier_id");

                    b.ToTable("j_quote_item_supplier", (string)null);
                });

            modelBuilder.Entity("JCPBackend.Models.j_quote_status", b =>
                {
                    b.Property<string>("status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("sort_order")
                        .HasColumnType("integer");

                    b.HasKey("status");

                    b.ToTable("j_quote_status", (string)null);
                });

            modelBuilder.Entity("JCPBackend.Models.j_site", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("id");

                    b.ToTable("j_sites");
                });

            modelBuilder.Entity("JCPBackend.Models.j_supplier", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("address_line_1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("address_line_2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("address_line_3")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("after_hours_no")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("contact_no")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("contact_person")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("credit_balance")
                        .HasColumnType("integer");

                    b.Property<int?>("credit_limit")
                        .HasColumnType("integer");

                    b.Property<string>("email")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("postal")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("reg_no")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("standby_email")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<string>("standby_no")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("standby_person")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("tax_clearance")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("tel_num")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("vat_no")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("id")
                        .HasName("PK_j_suppliers_1");

                    b.ToTable("j_suppliers");
                });

            modelBuilder.Entity("JCPBackend.Models.j_supplier_branch", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("address_line_1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("address_line_2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("address_line_3")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("contact_number")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("contact_person")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("email")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<decimal?>("lat")
                        .HasColumnType("decimal(16, 8)");

                    b.Property<decimal?>("lgn")
                        .HasColumnType("decimal(16, 8)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("postal")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("supplier_id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.HasKey("id")
                        .HasName("PK_j_suppliers");

                    b.HasIndex("supplier_id");

                    b.ToTable("j_supplier_branches");
                });

            modelBuilder.Entity("JCPBackend.Models.j_tech", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("site_access_id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("id");

                    b.ToTable("j_techs");
                });

            modelBuilder.Entity("JCPBackend.Models.j_user", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("end_date")
                        .HasColumnType("date");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("password_date")
                        .HasColumnType("date");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("tel_no")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("id")
                        .HasName("PK_j_users_1");

                    b.HasIndex(new[] { "username" }, "IX_j_users_1")
                        .IsUnique();

                    b.ToTable("j_users");
                });

            modelBuilder.Entity("JCPBackend.Models.j_vehicle", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("customer_id")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("engine_number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("registration")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("site_access_id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<string>("vin_number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("year")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("j_vehicles");
                });

            modelBuilder.Entity("JCPBackend.Models.j_vehicle_model", b =>
                {
                    b.Property<string>("brand")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("model")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("brand", "model");

                    b.ToTable("j_vehicle_models");
                });

            modelBuilder.Entity("j_user_site_access", b =>
                {
                    b.Property<string>("user_id")
                        .HasColumnType("character(36)");

                    b.Property<string>("site_id")
                        .HasColumnType("character(36)");

                    b.HasKey("user_id", "site_id");

                    b.HasIndex("site_id");

                    b.ToTable("j_user_site_access", (string)null);
                });

            modelBuilder.Entity("JCPBackend.Models.j_quote", b =>
                {
                    b.HasOne("JCPBackend.Models.j_user", "create_user")
                        .WithMany("j_quotecreate_users")
                        .HasForeignKey("create_user_id")
                        .IsRequired()
                        .HasConstraintName("FK_create_user");

                    b.HasOne("JCPBackend.Models.j_customer", "customer")
                        .WithMany("j_quotes")
                        .HasForeignKey("customer_id")
                        .IsRequired()
                        .HasConstraintName("FK_customer");

                    b.HasOne("JCPBackend.Models.j_tech", "tech")
                        .WithMany("j_quotes")
                        .HasForeignKey("tech_id")
                        .HasConstraintName("FK_tech");

                    b.HasOne("JCPBackend.Models.j_user", "update_user")
                        .WithMany("j_quoteupdate_users")
                        .HasForeignKey("update_user_id")
                        .IsRequired()
                        .HasConstraintName("FK_update_user");

                    b.HasOne("JCPBackend.Models.j_vehicle", "vehicle")
                        .WithMany("j_quotes")
                        .HasForeignKey("vehicle_id")
                        .IsRequired()
                        .HasConstraintName("FK_vehicle");

                    b.Navigation("create_user");

                    b.Navigation("customer");

                    b.Navigation("tech");

                    b.Navigation("update_user");

                    b.Navigation("vehicle");
                });

            modelBuilder.Entity("JCPBackend.Models.j_quote_item", b =>
                {
                    b.HasOne("JCPBackend.Models.j_quote", "quote")
                        .WithMany("items")
                        .HasForeignKey("quote_id")
                        .IsRequired()
                        .HasConstraintName("FK_items");

                    b.Navigation("quote");
                });

            modelBuilder.Entity("JCPBackend.Models.j_quote_item_supplier", b =>
                {
                    b.HasOne("JCPBackend.Models.j_user", "user")
                        .WithMany("j_quote_item_suppliers")
                        .HasForeignKey("accepted_by_user_id")
                        .HasConstraintName("FK_j_quote_item_supplier_j_users");

                    b.HasOne("JCPBackend.Models.j_quote_item", "quote_item")
                        .WithMany("subquotes")
                        .HasForeignKey("quote_item_id")
                        .IsRequired()
                        .HasConstraintName("FK_j_quote_item_supplier_j_quote_items");

                    b.HasOne("JCPBackend.Models.j_supplier_branch", "supplier")
                        .WithMany("j_quote_item_suppliers")
                        .HasForeignKey("supplier_id")
                        .IsRequired()
                        .HasConstraintName("FK_supplier");

                    b.Navigation("quote_item");

                    b.Navigation("supplier");

                    b.Navigation("user");
                });

            modelBuilder.Entity("JCPBackend.Models.j_supplier_branch", b =>
                {
                    b.HasOne("JCPBackend.Models.j_supplier", "supplier")
                        .WithMany("supplier")
                        .HasForeignKey("supplier_id")
                        .HasConstraintName("FK_j_supplier_branches_j_suppliers");

                    b.Navigation("supplier");
                });

            modelBuilder.Entity("j_user_site_access", b =>
                {
                    b.HasOne("JCPBackend.Models.j_site", null)
                        .WithMany()
                        .HasForeignKey("site_id")
                        .IsRequired()
                        .HasConstraintName("FK_j_user_site_access_j_sites");

                    b.HasOne("JCPBackend.Models.j_user", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .IsRequired()
                        .HasConstraintName("FK_j_user_site_access_j_user_site_access");
                });

            modelBuilder.Entity("JCPBackend.Models.j_customer", b =>
                {
                    b.Navigation("j_quotes");
                });

            modelBuilder.Entity("JCPBackend.Models.j_quote", b =>
                {
                    b.Navigation("items");
                });

            modelBuilder.Entity("JCPBackend.Models.j_quote_item", b =>
                {
                    b.Navigation("subquotes");
                });

            modelBuilder.Entity("JCPBackend.Models.j_supplier", b =>
                {
                    b.Navigation("supplier");
                });

            modelBuilder.Entity("JCPBackend.Models.j_supplier_branch", b =>
                {
                    b.Navigation("j_quote_item_suppliers");
                });

            modelBuilder.Entity("JCPBackend.Models.j_tech", b =>
                {
                    b.Navigation("j_quotes");
                });

            modelBuilder.Entity("JCPBackend.Models.j_user", b =>
                {
                    b.Navigation("j_quote_item_suppliers");

                    b.Navigation("j_quotecreate_users");

                    b.Navigation("j_quoteupdate_users");
                });

            modelBuilder.Entity("JCPBackend.Models.j_vehicle", b =>
                {
                    b.Navigation("j_quotes");
                });
#pragma warning restore 612, 618
        }
    }
}
